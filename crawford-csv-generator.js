// Crawford Sign-in Audit Report - CSV Generator
// Converts the processed report data into CSV format for email attachment

const items = $input.all();
const reportData = items.map(item => item.json);

if (!reportData || reportData.length === 0) {
    return [{ json: { error: 'No data received for CSV generation' } }];
}

// Helper function to escape CSV values
function escapeCSVValue(value) {
    if (value === null || value === undefined) {
        return '';
    }

    const stringValue = String(value);

    // If the value contains comma, quote, or newline, wrap it in quotes and escape internal quotes
    if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n') || stringValue.includes('\r')) {
        return '"' + stringValue.replace(/"/g, '""') + '"';
    }

    return stringValue;
}

// Get column headers from the first data row (skip summary rows)
const dataRows = reportData.filter(row =>
    row['Device Name'] &&
    !row['Device Name'].includes('===') &&
    row['Device Name'] !== ''
);

if (dataRows.length === 0) {
    return [{ json: { error: 'No valid data rows found for CSV generation' } }];
}

const headers = Object.keys(dataRows[0]);

// Generate CSV content
let csvContent = '';

// Add CSV header row
csvContent += headers.map(header => escapeCSVValue(header)).join(',') + '\n';

// Add data rows
dataRows.forEach(row => {
    const csvRow = headers.map(header => escapeCSVValue(row[header] || '')).join(',');
    csvContent += csvRow + '\n';
});

// Generate filename with timestamp
const now = new Date();
const timestamp = now.toISOString().slice(0, 19).replace(/[:.]/g, '-');
const filename = `Crawford_SignIn_Audit_Report_${timestamp}.csv`;

// Create binary data for attachment
const csvBuffer = Buffer.from(csvContent, 'utf8');

// Generate summary for email body
const totalDevices = dataRows.length;
const onlineDevices = dataRows.filter(row => row['Current Status'] === 'Online').length;
const offlineDevices = totalDevices - onlineDevices;
const highRiskDevices = dataRows.filter(row => row['Risk Level'] === 'High').length;
const mediumRiskDevices = dataRows.filter(row => row['Risk Level'] === 'Medium').length;
const totalSignIns = dataRows.reduce((sum, row) => {
    const signIns = parseInt(row['Total Sign-ins (30d)']) || 0;
    return sum + signIns;
}, 0);

// Calculate average uptime
const avgUptime = dataRows.reduce((sum, row) => {
    const uptime = parseFloat((row['Uptime %'] || '0%').replace('%', '')) || 0;
    return sum + uptime;
}, 0) / totalDevices;

// Get top active devices (most sign-ins)
const topActiveDevices = dataRows
    .sort((a, b) => (parseInt(b['Total Sign-ins (30d)']) || 0) - (parseInt(a['Total Sign-ins (30d)']) || 0))
    .slice(0, 5)
    .map(device => `${device['Device Name']} (${device['Total Sign-ins (30d)']} sign-ins)`)
    .join('\n');

// Get devices needing attention (offline or high risk)
const devicesNeedingAttention = dataRows
    .filter(row => row['Current Status'] === 'Offline' || row['Risk Level'] === 'High')
    .map(device => `${device['Device Name']} - ${device['Current Status']} (Risk: ${device['Risk Level']})`)
    .join('\n');

// Create email summary
const emailSummary = `
Crawford Sign-in Audit Report Summary
Generated: ${now.toLocaleString()}
Report Period: Last 30 days

=== DEVICE STATUS OVERVIEW ===
Total Devices: ${totalDevices}
Online Devices: ${onlineDevices} (${Math.round((onlineDevices/totalDevices)*100)}%)
Offline Devices: ${offlineDevices} (${Math.round((offlineDevices/totalDevices)*100)}%)
Average Uptime: ${Math.round(avgUptime * 100) / 100}%

=== RISK ASSESSMENT ===
High Risk Devices: ${highRiskDevices}
Medium Risk Devices: ${mediumRiskDevices}
Low Risk Devices: ${totalDevices - highRiskDevices - mediumRiskDevices}

=== ACTIVITY SUMMARY ===
Total Sign-ins (30 days): ${totalSignIns}
Average Sign-ins per Device: ${Math.round(totalSignIns / totalDevices)}

=== TOP ACTIVE DEVICES ===
${topActiveDevices || 'No activity recorded'}

=== DEVICES NEEDING ATTENTION ===
${devicesNeedingAttention || 'All devices operating normally'}

=== REPORT DETAILS ===
The detailed CSV report is attached with comprehensive information including:
- Device status and uptime metrics
- Sign-in/sign-out activity tracking
- Security risk assessments
- Alert and system information
- Patch and antivirus status
- Last seen and connectivity data

Please review the attached CSV file for complete device details.

---
This report was automatically generated by the Crawford IT Monitoring System.
For questions or concerns, please contact the IT department.
`;

// Return both the CSV attachment and email summary
return [
    {
        json: {
            filename: filename,
            csvContent: csvContent,
            emailSummary: emailSummary,
            reportStats: {
                totalDevices,
                onlineDevices,
                offlineDevices,
                highRiskDevices,
                avgUptime: Math.round(avgUptime * 100) / 100,
                totalSignIns,
                reportDate: now.toISOString()
            }
        },
        binary: {
            csvReport: {
                data: csvBuffer.toString('base64'),
                mimeType: 'text/csv',
                fileName: filename
            }
        }
    }
];
