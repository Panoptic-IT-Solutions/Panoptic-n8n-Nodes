/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/site": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates a new site in the authenticated user's account. */
        put: operations["create"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/variable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates a site variable in the site identified by the given site Uid. */
        put: operations["createSiteVariable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/site/{siteUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Moves a device from one site to another site. */
        put: operations["moveDevice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/quickjob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates a quick job on the device identified by the given device Uid. */
        put: operations["createQuickJob"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/variable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates an account variable */
        put: operations["createAccountVariable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/user/resetApiKeys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the authenticated user's API access and secret keys. */
        post: operations["resetApiKeys"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the site (including total number of devices) identified by the given site Uid. */
        get: operations["getSite"];
        put?: never;
        /** Updates the site identified by the given site Uid. */
        post: operations["update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/variable/{variableId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the site variable identified by the given site Uid and variable Id. */
        post: operations["updateSiteVariable"];
        /** Deletes the site variable identified by the given site Uid and variable Id. */
        delete: operations["deleteSiteVariable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/settings/proxy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates/updates the proxy settings for the site identified by the given site Uid. */
        post: operations["updateProxy"];
        /** Deletes site proxy settings for the site identified by the given site Uid. */
        delete: operations["deleteProxy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/warranty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sets the warranty of a device identified by the given device Uid.
         * @description The warrantyDate field should be a ISO 8601 string with this format: yyyy-mm-dd. The warranty date can also be set to null.
         */
        post: operations["setWarrantyData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/udf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sets the user defined fields of a device identified by the given device Uid.
         * @description Any user defined field supplied with an empty value will be set to null. All user defined fields not supplied will retain their current values.
         */
        post: operations["setUdfFields"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/alert/{alertUid}/unmute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alerts can no longer be un-muted, as of the 8.9.0 release.
         * @deprecated
         */
        post: operations["unmuteAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/alert/{alertUid}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resolves the alert identified by the given alert Uid. */
        post: operations["resolveAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/alert/{alertUid}/mute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Alerts can no longer be muted, as of the 8.9.0 release.
         * @deprecated
         */
        post: operations["muteAlert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/variable/{variableId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates the account variable identified by the given variable Id. */
        post: operations["updateAccountVariable"];
        /** Deletes the account variable identified by the given variable Id. */
        delete: operations["deleteAccountVariable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/system/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches the system status (start date, status and version).
         * @description An API access token is not necessary.
         */
        get: operations["getStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/system/request_rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the request rate status for the authenticated user's account. */
        get: operations["get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/system/pagination": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the pagination configurations. */
        get: operations["getPaginationConfigurations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the variables of the site identified by the given site Uid. */
        get: operations["getSiteVariables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches settings of the site identified by the given site Uid. */
        get: operations["getSiteSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the site device filters (that the user can see with administrator role) of the site identified by the given site Uid. */
        get: operations["getSiteDeviceFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the devices records of the site identified by the given site Uid. */
        get: operations["getSiteDevices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/devices/network-interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the shortened devices records with network interface information of the site identified by the given site Uid. */
        get: operations["getSiteDevicesWithNetworkInterface"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/alerts/resolved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches the resolved alerts of the site identified by the given site Uid.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getSiteResolvedAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/site/{siteUid}/alerts/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches the open alerts of the site identified by the given site Uid.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getSiteOpenAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/job/{jobUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the job identified by the given job Uid. */
        get: operations["get_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/job/{jobUid}/results/{deviceUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches job results of the job identified by the job Uid for device identified by the device Uid. */
        get: operations["getJobResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/job/{jobUid}/results/{deviceUid}/stdout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the job's StdOut identified by the given job Uid and device Uid. */
        get: operations["getStdOut"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/job/{jobUid}/results/{deviceUid}/stderr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the job's StdErr identified by the given job Uid and device Uid. */
        get: operations["getStdErr"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/job/{jobUid}/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches components of the job identified by the given job Uid. */
        get: operations["getJobComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/filter/default-filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the default device filters. */
        get: operations["getDefaultsFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/filter/custom-filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the custom device filters for the user (using administrator role). */
        get: operations["getCustomFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the device identified by the given device Uid. */
        get: operations["getByUid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/alerts/resolved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches the resolved alerts of the device identified by the given device Uid.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getDeviceResolvedAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/{deviceUid}/alerts/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches the open alerts of the device identified by the given device Uid.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getDeviceOpenAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/macAddress/{macAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the device(s) identified by the given MAC address in format: XXXXXXXXXXXX */
        get: operations["getByMacAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/device/id/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the device identified by the given device Id. */
        get: operations["getById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/printer/{deviceUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches audit data of the printer identified the given device Uid.
         * @description The device class must be of type "printer".
         */
        get: operations["getPrinterAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/esxihost/{deviceUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches audit data of the ESXi host identified the given device Uid.
         * @description The device class must be of type "esxihost".
         */
        get: operations["getEsxiHostAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/device/{deviceUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches audit data of the generic device identified the given device Uid.
         * @description The device class must be of type "device".
         */
        get: operations["getDeviceAudit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/device/{deviceUid}/software": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches audited software of the generic device identified the given device Uid.
         * @description The device class must be of type "device".
         */
        get: operations["getDeviceAuditSoftware"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/device/macAddress/{macAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches audit data of the generic device(s) identified the given MAC address in format: XXXXXXXXXXXX
         * @description The device class must be of type "device".
         */
        get: operations["getDeviceAuditByMacAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/alert/{alertUid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches data of the alert identified by the given alert Uid. */
        get: operations["getAlert"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/activity-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the activity logs. */
        get: operations["getActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the authenticated user's account data. */
        get: operations["getUserAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the account variables. */
        get: operations["getAccountVariables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the authentication users records of the authenticated user's account. */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/sites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the site records of the authenticated user's account. */
        get: operations["getSites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/dnet-site-mappings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the sites records with its mapped dnet network id for the authenticated user's account. */
        get: operations["getDnetSiteMappings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the devices of the authenticated user's account. */
        get: operations["getUserAccountDevices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/components": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the components records of the authenticated user's account. */
        get: operations["getComponents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/alerts/resolved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches resolved alerts of the authenticated user's account.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getUserAccountClosedAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/account/alerts/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches open alerts of the authenticated user's account.
         * @description If the muted parameter is not provided, both muted and umuted alerts will be queried.
         */
        get: operations["getUserAccountOpenAlerts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Create a site request. */
        CreateSiteRequest: {
            name: string;
            description?: string;
            notes?: string;
            onDemand?: boolean;
            splashtopAutoInstall?: boolean;
            proxySettings?: components["schemas"]["ProxySettings"];
        };
        /** @description Site's Proxy Settings */
        ProxySettings: {
            host?: string;
            password?: string;
            /** Format: int32 */
            port?: number;
            /** @enum {string} */
            type?: "http" | "socks4" | "socks5";
            username?: string;
        };
        /** @description Devices Status */
        DevicesStatus: {
            /** Format: int64 */
            numberOfDevices?: number;
            /** Format: int64 */
            numberOfOnlineDevices?: number;
            /** Format: int64 */
            numberOfOfflineDevices?: number;
        };
        /** @description Site data */
        Site: {
            /** Format: int64 */
            id?: number;
            /** @description Unique alphanumeric UID of this site */
            uid?: string;
            /** @description Unique alphanumeric UID of the account to which this site belongs */
            accountUid?: string;
            name?: string;
            description?: string;
            notes?: string;
            onDemand?: boolean;
            splashtopAutoInstall?: boolean;
            proxySettings?: components["schemas"]["ProxySettings"];
            devicesStatus?: components["schemas"]["DevicesStatus"];
            autotaskCompanyName?: string;
            autotaskCompanyId?: string;
            portalUrl?: string;
        };
        /** @description Variable creation data */
        "Variable Creation Request": {
            /** @description Variable name */
            name?: string;
            /** @description Variable value */
            value?: string;
            /** @description Variable masking (hiding) */
            masked?: boolean;
        };
        CreateQuickJobRequest: {
            jobName: string;
            jobComponent: components["schemas"]["JobComponentRequest"];
        };
        /** @description Job component request data */
        JobComponentRequest: {
            /** @description Component UID. List of components for the account could be retrieved via account resource */
            componentUid?: string;
            variables?: components["schemas"]["JobComponentVariable"][];
        };
        /** @description Job component variable data */
        JobComponentVariable: {
            /** @description Variable name has to match one of component's variables */
            name?: string;
            /** @description Value has to be convertible to the type specified in component variable */
            value?: string;
        };
        /** @description Create Quick Job Response */
        CreateQuickJobResponse: {
            jobComponents?: components["schemas"]["JobComponent"][];
            job?: components["schemas"]["Job"];
        };
        /** @description Job data */
        Job: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            dateCreated?: string;
            name?: string;
            uid?: string;
            /** @enum {string} */
            status?: "active" | "completed";
        };
        /** @description Job component data */
        JobComponent: {
            uid?: string;
            name?: string;
            variables?: components["schemas"]["JobComponentVariable"][];
        };
        /** @description Authentication user keys */
        AuthUserKey: {
            apiAccessKey?: string;
            apiSecretKey?: string;
            userName?: string;
        };
        /** @description A site's data request. */
        SiteRequest: {
            name: string;
            description?: string;
            notes?: string;
            onDemand?: boolean;
            splashtopAutoInstall?: boolean;
        };
        /** @description Variable update data */
        "Variable Update Request": {
            /** @description Variable name */
            name?: string;
            /** @description Variable value */
            value?: string;
        };
        /** @description General site settings data */
        GeneralSettings: {
            name?: string;
            uid?: string;
            description?: string;
            onDemand?: boolean;
        };
        /** @description Mail recipient data */
        MailRecipient: {
            name?: string;
            email?: string;
            type?: string;
            /** Format: int64 */
            receives?: number;
            receivesNewDevices?: boolean;
            receivesReports?: boolean;
            receivesAlerts?: boolean;
        };
        /** @description Site settings data */
        SiteSettings: {
            generalSettings?: components["schemas"]["GeneralSettings"];
            proxySettings?: components["schemas"]["ProxySettings"];
            mailRecipients?: components["schemas"]["MailRecipient"][];
        };
        /** @description Device's warranty data */
        Warranty: {
            warrantyDate?: string;
        };
        /** @description User defined fields */
        Udf: {
            udf1?: string;
            udf2?: string;
            udf3?: string;
            udf4?: string;
            udf5?: string;
            udf6?: string;
            udf7?: string;
            udf8?: string;
            udf9?: string;
            udf10?: string;
            udf11?: string;
            udf12?: string;
            udf13?: string;
            udf14?: string;
            udf15?: string;
            udf16?: string;
            udf17?: string;
            udf18?: string;
            udf19?: string;
            udf20?: string;
            udf21?: string;
            udf22?: string;
            udf23?: string;
            udf24?: string;
            udf25?: string;
            udf26?: string;
            udf27?: string;
            udf28?: string;
            udf29?: string;
            udf30?: string;
        };
        StatusResponse: {
            version?: string;
            status?: string;
            /** Format: date-time */
            started?: string;
        };
        RateStatusResponse: {
            /** Format: int64 */
            slidingTimeWindowSizeSeconds?: number;
            accountUid?: string;
            /** Format: int64 */
            accountCount?: number;
            /** Format: int64 */
            accountRateLimit?: number;
            /** Format: float */
            accountCutOffRatio?: number;
        };
        /** @description Pagination configuration */
        PaginationConfiguration: {
            /**
             * Format: int32
             * @description Default and maximum number of elements per AEM page (except alerts pagination)
             */
            max?: number;
        };
        /** @description Pagination data */
        PaginationData: {
            /** Format: int32 */
            count?: number;
            /** Format: int64 */
            totalCount?: number;
            prevPageUrl?: string;
            nextPageUrl?: string;
        };
        /** @description Variable data */
        Variable: {
            /** Format: int64 */
            id?: number;
            name?: string;
            value?: string;
            masked?: boolean;
        };
        /** @description Variables page */
        VariablesPage: {
            pageDetails: components["schemas"]["PaginationData"];
            variables: components["schemas"]["Variable"][];
        };
        /** @description Filter data */
        Filter: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            /** @enum {string} */
            type?: "rmm_default" | "custom" | "site";
            /** Format: date-time */
            dateCreate?: string;
            /** Format: date-time */
            lastUpdated?: string;
        };
        /** @description Filters page */
        FiltersPage: {
            pageDetails: components["schemas"]["PaginationData"];
            filters: components["schemas"]["Filter"][];
        };
        /** @description Device antivirus data */
        Antivirus: {
            antivirusProduct?: string;
            /** @enum {string} */
            antivirusStatus?: "RunningAndUpToDate" | "RunningAndNotUpToDate" | "NotRunning" | "NotDetected";
        };
        /** @description Device data */
        Device: {
            /** Format: int64 */
            id?: number;
            uid?: string;
            /** Format: int64 */
            siteId?: number;
            siteUid?: string;
            siteName?: string;
            deviceType?: components["schemas"]["DevicesType"];
            hostname?: string;
            intIpAddress?: string;
            operatingSystem?: string;
            lastLoggedInUser?: string;
            domain?: string;
            cagVersion?: string;
            displayVersion?: string;
            extIpAddress?: string;
            description?: string;
            a64Bit?: boolean;
            rebootRequired?: boolean;
            online?: boolean;
            suspended?: boolean;
            deleted?: boolean;
            /** Format: date-time */
            lastSeen?: string;
            /** Format: date-time */
            lastReboot?: string;
            /** Format: date-time */
            lastAuditDate?: string;
            /** Format: date-time */
            creationDate?: string;
            udf?: components["schemas"]["Udf"];
            snmpEnabled?: boolean;
            /** @enum {string} */
            deviceClass?: "device" | "printer" | "esxihost" | "unknown";
            portalUrl?: string;
            warrantyDate?: string;
            antivirus?: components["schemas"]["Antivirus"];
            patchManagement?: components["schemas"]["PatchManagement"];
            softwareStatus?: string;
            webRemoteUrl?: string;
        };
        /** @description Devices page */
        DevicesPage: {
            pageDetails: components["schemas"]["PaginationData"];
            devices: components["schemas"]["Device"][];
        };
        /** @description Devices Type */
        DevicesType: {
            category?: string;
            type?: string;
        };
        /** @description Patch management data */
        PatchManagement: {
            /** @enum {string} */
            patchStatus?: "NoPolicy" | "NoData" | "RebootRequired" | "InstallError" | "ApprovedPending" | "FullyPatched";
            /** Format: int64 */
            patchesApprovedPending?: number;
            /** Format: int64 */
            patchesNotApproved?: number;
            /** Format: int64 */
            patchesInstalled?: number;
        };
        /** @description Device Network Interface data */
        "Device Network Interface": {
            /** Format: int64 */
            id?: number;
            uid?: string;
            /** Format: int64 */
            siteId?: number;
            siteUid?: string;
            siteName?: string;
            deviceType?: components["schemas"]["DevicesType"];
            hostname?: string;
            intIpAddress?: string;
            extIpAddress?: string;
            nics?: components["schemas"]["NetworkInterface"][];
        };
        /** @description Devices Network Interface page */
        DevicesNetworkInterfacePage: {
            pageDetails: components["schemas"]["PaginationData"];
            devices: components["schemas"]["Device Network Interface"][];
        };
        /** @description Network interface audit data */
        NetworkInterface: {
            instance?: string;
            ipv4?: string;
            ipv6?: string;
            macAddress?: string;
            type?: string;
        };
        ActionContext: {
            "@class": "ActionContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            packageName?: string;
            /** @enum {string} */
            actionType?: "INSTALLED" | "UNINSTALLED" | "VERSION_CHANGED";
            prevVersion?: string;
            version?: string;
        });
        /** @description Alert data */
        Alert: {
            alertUid?: string;
            /** @enum {string} */
            priority?: "Critical" | "High" | "Moderate" | "Low" | "Information" | "Unknown";
            diagnostics?: string;
            resolved?: boolean;
            resolvedBy?: string;
            /** Format: date-time */
            resolvedOn?: string;
            muted?: boolean;
            ticketNumber?: string;
            /** Format: date-time */
            timestamp?: string;
            alertMonitorInfo?: components["schemas"]["AlertMonitorInfo"];
            alertContext?: components["schemas"]["ActionContext"] | components["schemas"]["AntivirusContext"] | components["schemas"]["BackupManagementContext"] | components["schemas"]["CustomSNMPContext"] | components["schemas"]["DiskHealthContext"] | components["schemas"]["DiskUsageContext"] | components["schemas"]["EndpointSecurityThreatContext"] | components["schemas"]["EndpointSecurityWindowsDefenderContext"] | components["schemas"]["EventLogContext"] | components["schemas"]["FanContext"] | components["schemas"]["FileSystemContext"] | components["schemas"]["OnlineOfflineStatusContext"] | components["schemas"]["PatchContext"] | components["schemas"]["PingContext"] | components["schemas"]["PrinterContext"] | components["schemas"]["PsuContext"] | components["schemas"]["RansomWareContext"] | components["schemas"]["ResourceUsageContext"] | components["schemas"]["SNMPProbeContext"] | components["schemas"]["ScriptContext"] | components["schemas"]["SecCenterContext"] | components["schemas"]["SecurityManagementContext"] | components["schemas"]["StatusContext"] | components["schemas"]["TemperatureContext"] | components["schemas"]["WindowsPerformanceContext"] | components["schemas"]["WmiContext"];
            alertSourceInfo?: components["schemas"]["AlertSourceInfo"];
            responseActions?: components["schemas"]["ResponseAction"][];
            /** Format: int32 */
            autoresolveMins?: number;
        };
        AlertContext: {
            "@class": string;
        };
        /** @description Alert monitor information */
        AlertMonitorInfo: {
            sendsEmails?: boolean;
            createsTicket?: boolean;
        };
        /** @description Alert source information data */
        AlertSourceInfo: {
            deviceUid?: string;
            deviceName?: string;
            siteUid?: string;
            siteName?: string;
        };
        /** @description Alerts page */
        AlertsPage: {
            pageDetails: components["schemas"]["PaginationData"];
            alerts: components["schemas"]["Alert"][];
        };
        AntivirusContext: {
            "@class": "AntivirusContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** @enum {string} */
            status?: "NOTDETECTED" | "NOTRUNNING" | "RUNNINGNOTUPTODATE";
            productName?: string;
        });
        BackupManagementContext: {
            "@class": "BackupManagementContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            errorMessage?: string;
            /** Format: int32 */
            timeout?: number;
        });
        CustomSNMPContext: {
            "@class": "CustomSNMPContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            displayName?: string;
            currentValue?: string;
            monitorInstance?: string;
        });
        DiskHealthContext: {
            "@class": "DiskHealthContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            reason?: string;
            /** @enum {string} */
            type?: "CPU" | "MEMORY" | "TEMPERATURE" | "FAN" | "DISKHEALTH" | "PSU" | "SNMP_THROUGHPUT";
        });
        DiskUsageContext: {
            "@class": "DiskUsageContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            diskName?: string;
            /** Format: float */
            totalVolume?: number;
            /** Format: float */
            freeSpace?: number;
            /** @enum {string} */
            unitOfMeasure?: "PERCENT" | "USED" | "FREE";
            /** @enum {string} */
            diskNameDesignation?: "ANY_VOLUME" | "ALL_VOLUMES" | "SINGLE_VOLUME";
        });
        EndpointSecurityThreatContext: {
            "@class": "EndpointSecurityThreatContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            esAlertId?: string;
            description?: string;
        });
        EndpointSecurityWindowsDefenderContext: {
            "@class": "EndpointSecurityWindowsDefenderContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            esAlertId?: string;
            description?: string;
        });
        EventLogContext: {
            "@class": "EventLogContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            logName?: string;
            code?: string;
            type?: string;
            source?: string;
            description?: string;
            /** Format: int32 */
            triggerCount?: number;
            /** Format: date-time */
            lastTriggered?: string;
            causedSuspension?: boolean;
        });
        FanContext: {
            "@class": "FanContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            reason?: string;
            /** @enum {string} */
            type?: "CPU" | "MEMORY" | "TEMPERATURE" | "FAN" | "DISKHEALTH" | "PSU" | "SNMP_THROUGHPUT";
        });
        FileSystemContext: {
            "@class": "FileSystemContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** Format: float */
            sample?: number;
            /** Format: float */
            threshold?: number;
            path?: string;
            /** @enum {string} */
            objectType?: "FILE" | "DIRECTORY";
            /** @enum {string} */
            condition?: "ABOVE_THRESHOLD" | "BELOW_THRESHOLD" | "REMOVED" | "CREATED";
        });
        OnlineOfflineStatusContext: {
            "@class": "OnlineOfflineStatusContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** @enum {string} */
            status?: "ONLINE" | "OFFLINE";
        });
        PatchContext: {
            "@class": "PatchContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            patchUid?: string;
            policyUid?: string;
            result?: string;
            info?: string;
        });
        PingContext: {
            "@class": "PingContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            instanceName?: string;
            /** Format: int32 */
            roundtripTime?: number;
            reasons?: string[];
        });
        PrinterContext: {
            "@class": "PrinterContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            ipAddress?: string;
            macAddress?: string;
            /** Format: int32 */
            markerSupplyIndex?: number;
            /** Format: int32 */
            currentLevel?: number;
        });
        PsuContext: {
            "@class": "PsuContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            reason?: string;
            /** @enum {string} */
            type?: "CPU" | "MEMORY" | "TEMPERATURE" | "FAN" | "DISKHEALTH" | "PSU" | "SNMP_THROUGHPUT";
        });
        RansomWareContext: {
            "@class": "RansomWareContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** Format: int32 */
            state?: number;
            /** Format: int32 */
            confidenceFactor?: number;
            affectedDirectories?: string[];
            watchPaths?: string[];
            rwextension?: string;
            /** Format: date-time */
            metaAlertTime?: string;
            /** Format: date-time */
            alertTime?: string;
        });
        ResourceUsageContext: {
            "@class": "ResourceUsageContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            processName?: string;
            /** Format: float */
            sample?: number;
            /** @enum {string} */
            type?: "CPU" | "MEMORY" | "TEMPERATURE" | "FAN" | "DISKHEALTH" | "PSU" | "SNMP_THROUGHPUT";
        });
        ResponseAction: {
            /** Format: date-time */
            actionTime?: string;
            /** @enum {string} */
            actionType?: "EMAIL_SENT" | "EMAIL_SEND_ERROR" | "TICKET_PENDING" | "TICKET_CREATED" | "TICKET_CREATION_ERROR" | "TICKET_CLOSED_CALL" | "COMPONENT" | "WEBHOOK_EXECUTED" | "WEBHOOK_EXECUTION_ERROR";
            description?: string;
            actionReference?: string;
            actionReferenceInt?: string;
        };
        SNMPProbeContext: {
            "@class": "SNMPProbeContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            ipAddress?: string;
            OID?: string;
            ruleName?: string;
            responseValue?: string;
            deviceName?: string;
            monitorName?: string;
            oid?: string;
        });
        ScriptContext: {
            "@class": "ScriptContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            samples?: {
                [key: string]: string;
            };
        });
        SecCenterContext: {
            "@class": "SecCenterContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            productName?: string;
            /** @enum {string} */
            alertType?: "DISABLED" | "NOT_UPTODATE";
        });
        SecurityManagementContext: {
            "@class": "SecurityManagementContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** Format: int32 */
            status?: number;
            productName?: string;
            /** Format: int32 */
            infoTime?: number;
            virusName?: string;
            infectedFiles?: string[];
            /** Format: int32 */
            productNotUpdatedForDays?: number;
            /** Format: int32 */
            systemRemainsInfectedForHours?: number;
            /** Format: int32 */
            expiryLicenseForDays?: number;
        });
        StatusContext: {
            "@class": "StatusContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            processName?: string;
            /** @enum {string} */
            status?: "STOPPED" | "STARTPENDING" | "STOPPENDING" | "RUNNING" | "CONTINUEPENDING" | "PAUSEPENDING" | "PAUSED";
        });
        TemperatureContext: {
            "@class": "TemperatureContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** Format: float */
            degree?: number;
            /** @enum {string} */
            type?: "CPU" | "MEMORY" | "TEMPERATURE" | "FAN" | "DISKHEALTH" | "PSU" | "SNMP_THROUGHPUT";
        });
        WindowsPerformanceContext: {
            "@class": "WindowsPerformanceContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            /** Format: float */
            value?: number;
        });
        WmiContext: {
            "@class": "WmiContext";
        } & (Omit<components["schemas"]["AlertContext"], "@class"> & {
            value?: string;
        });
        /** @description Job component result data */
        JobComponentResult: {
            componentUid?: string;
            componentName?: string;
            /** @enum {string} */
            componentStatus?: "Success" | "Failure";
            /** Format: int32 */
            numberOfWarnings?: number;
            hasStdOut?: boolean;
            hasStdErr?: boolean;
        };
        /** @description Job results data */
        JobResults: {
            jobUid?: string;
            deviceUid?: string;
            /** Format: date-time */
            ranOn?: string;
            /** @enum {string} */
            jobDeploymentStatus?: "Expired" | "Pending" | "Running" | "Success" | "Warning" | "Retired" | "Failure";
            componentResults?: components["schemas"]["JobComponentResult"][];
        };
        /** @description Job Std data */
        JobStdData: {
            componentUid?: string;
            componentName?: string;
            stdData?: string;
        };
        /** @description Job components page */
        JobComponentsPage: {
            pageDetails: components["schemas"]["PaginationData"];
            jobComponents: components["schemas"]["JobComponent"][];
        };
        /** @description Printer audit data */
        Printer: {
            /** Format: int64 */
            printedPageCount?: number;
        };
        /** @description Printer audit data */
        PrinterAudit: {
            portalUrl?: string;
            snmpInfo?: components["schemas"]["SnmpInfo"];
            printerMarkerSupplies?: components["schemas"]["PrinterMarkerSupply"][];
            printer?: components["schemas"]["Printer"];
            systemInfo?: components["schemas"]["PrinterSystemInfo"];
            nics?: components["schemas"]["NetworkInterface"][];
        };
        /** @description Printer marker supply audit data */
        PrinterMarkerSupply: {
            description?: string;
            maxCapacity?: string;
            suppliesLevel?: string;
        };
        /** @description Printer system info audit data */
        PrinterSystemInfo: {
            manufacturer?: string;
            model?: string;
        };
        /** @description SNMP info audit data */
        SnmpInfo: {
            snmpName?: string;
            snmpContact?: string;
            snmpDescription?: string;
            snmpLocation?: string;
            snmpUptime?: string;
            nicManufacturer?: string;
            objectId?: string;
            snmpSerial?: string;
        };
        /** @description Data extent audit data */
        ESXiDataExtent: {
            name?: string;
            /** Format: int64 */
            size?: number;
            mediaType?: string;
            status?: string;
        };
        /** @description ESXi datastore audit data */
        ESXiDatastore: {
            datastoreName?: string;
            /** Format: int32 */
            subscriptionPercent?: number;
            /** Format: int64 */
            freeSpace?: number;
            /** Format: int64 */
            size?: number;
            fileSystem?: string;
            status?: string;
            dataExtents?: components["schemas"]["ESXiDataExtent"][];
        };
        /** @description ESXi Host audit data */
        ESXiHostAudit: {
            portalUrl?: string;
            systemInfo?: components["schemas"]["ESXiSystemInfo"];
            guests?: components["schemas"]["Guest"][];
            processors?: components["schemas"]["ESXiProcessor"][];
            nics?: components["schemas"]["ESXiNic"][];
            physicalMemory?: components["schemas"]["PhysicalMemory"][];
            datastores?: components["schemas"]["ESXiDatastore"][];
        };
        /** @description ESXi newtwork adapter audit data */
        ESXiNic: {
            name?: string;
            ipv4?: string;
            ipv6?: string;
            macAddress?: string;
            speed?: string;
            type?: string;
        };
        /** @description ESXi processor audit data */
        ESXiProcessor: {
            /** Format: double */
            frequency?: number;
            name?: string;
            /** Format: int32 */
            numberOfCores?: number;
        };
        /** @description ESXi host system info audit data */
        ESXiSystemInfo: {
            manufacturer?: string;
            model?: string;
            name?: string;
            /** Format: int32 */
            numberOfSnapshots?: number;
            serviceTag?: string;
        };
        /** @description Guest audit data */
        Guest: {
            guestName?: string;
            /** Format: int32 */
            processorSpeedTotal?: number;
            /** Format: int64 */
            memorySizeTotal?: number;
            /** Format: int32 */
            numberOfSnapshots?: number;
            datastores?: string;
        };
        /** @description Physical memory audit data */
        PhysicalMemory: {
            module?: string;
            /** Format: int64 */
            size?: number;
            type?: string;
            speed?: string;
            serialNumber?: string;
            partNumber?: string;
            bank?: string;
        };
        /** @description Attached device audit data */
        AttachedDevice: {
            deviceName?: string;
            deviceType?: string;
            driverFile?: string;
            /** Format: date-time */
            driverFileLastModified?: string;
            driverManufacturer?: string;
            driverName?: string;
            driverVersion?: string;
            portName?: string;
        };
        /** @description Baseboard audit data */
        BaseBoard: {
            manufacturer?: string;
            product?: string;
        };
        /** @description Bios audit data */
        Bios: {
            instance?: string;
            /** Format: date-time */
            releaseDate?: string;
            serialNumber?: string;
            smBiosVersion?: string;
        };
        /** @description Device audit data */
        DeviceAudit: {
            portalUrl?: string;
            webRemoteUrl?: string;
            systemInfo?: components["schemas"]["SystemInfo"];
            nics?: components["schemas"]["NetworkInterface"][];
            bios?: components["schemas"]["Bios"];
            baseBoard?: components["schemas"]["BaseBoard"];
            displays?: components["schemas"]["Display"][];
            logicalDisks?: components["schemas"]["LogicalDisk"][];
            mobileInfo?: components["schemas"]["MobileInfo"][];
            processors?: components["schemas"]["Processor"][];
            videoBoards?: components["schemas"]["VideoBoard"][];
            attachedDevices?: components["schemas"]["AttachedDevice"][];
            snmpInfo?: components["schemas"]["SnmpInfo"];
            physicalMemory?: components["schemas"]["PhysicalMemory"][];
        };
        /** @description Display audit data */
        Display: {
            instance?: string;
            /** Format: int32 */
            screenHeight?: number;
            /** Format: int32 */
            screenWidth?: number;
        };
        /** @description Logical disk audit data */
        LogicalDisk: {
            description?: string;
            diskIdentifier?: string;
            /** Format: int64 */
            freespace?: number;
            /** Format: int64 */
            size?: number;
        };
        /** @description Mobile info audit data */
        MobileInfo: {
            iccid?: string;
            imei?: string;
            number?: string;
            operator?: string;
        };
        /** @description Processor audit data */
        Processor: {
            name?: string;
        };
        /** @description System info audit data */
        SystemInfo: {
            manufacturer?: string;
            model?: string;
            /** Format: int64 */
            totalPhysicalMemory?: number;
            username?: string;
            dotNetVersion?: string;
            /** Format: int32 */
            totalCpuCores?: number;
        };
        /** @description Videoboard audit data */
        VideoBoard: {
            displayAdapter?: string;
        };
        /** @description Software audit data */
        Software: {
            name?: string;
            version?: string;
        };
        /** @description Software page */
        SoftwarePage: {
            pageDetails: components["schemas"]["PaginationData"];
            software: components["schemas"]["Software"][];
        };
        /** @description Activity log data */
        ActivityLog: {
            id?: string;
            /** @enum {string} */
            entity?: "DEVICE" | "USER";
            category?: string;
            action?: string;
            /**
             * Format: double
             * @description Activity Log creation unix timestamp
             * @example 1689072497.714
             */
            date?: number;
            site?: components["schemas"]["SiteBasicDto"];
            /** Format: int64 */
            deviceId?: number;
            hostname?: string;
            user?: components["schemas"]["UserDto"];
            details?: string;
            hasStdOut?: boolean;
            hasStdErr?: boolean;
        };
        /** @description Activity logs page */
        ActivityLogsPage: {
            pageDetails: components["schemas"]["PaginationData"];
            activities: components["schemas"]["ActivityLog"][];
            /** @description Shows error information when request fails at the database layer */
            error?: string;
        };
        /** @description Site information */
        SiteBasicDto: {
            /** Format: int64 */
            id?: number;
            name?: string;
        };
        /** @description User information */
        UserDto: {
            /** Format: int64 */
            id?: number;
            userName?: string;
            firstName?: string;
            lastName?: string;
        };
        /** @description Account data */
        Account: {
            /** Format: int64 */
            id?: number;
            name?: string;
            descriptor?: components["schemas"]["Account Descriptor"];
            uid?: string;
            currency?: string;
            devicesStatus?: components["schemas"]["AccountDevicesStatus"];
        };
        /** @description Account description data */
        "Account Descriptor": {
            bilingEmail?: string;
            /** Format: int32 */
            deviceLimit?: number;
            timeZone?: string;
        };
        /** @description Account Devices Status */
        AccountDevicesStatus: {
            /** Format: int64 */
            numberOfDevices?: number;
            /** Format: int64 */
            numberOfOnlineDevices?: number;
            /** Format: int64 */
            numberOfOfflineDevices?: number;
            /** Format: int64 */
            numberOfOnDemandDevices?: number;
            /** Format: int64 */
            numberOfManagedDevices?: number;
        };
        /** @description Authentication user data */
        AuthUser: {
            lastName?: string;
            firstName?: string;
            username?: string;
            email?: string;
            telephone?: string;
            status?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            lastAccess?: string;
            disabled?: boolean;
        };
        /** @description Users page */
        UsersPage: {
            pageDetails: components["schemas"]["PaginationData"];
            users: components["schemas"]["AuthUser"][];
        };
        /** @description Sites page */
        SitesPage: {
            pageDetails: components["schemas"]["PaginationData"];
            sites: components["schemas"]["Site"][];
        };
        /** @description Dnet site mappings data */
        DnetSiteMappingsDto: {
            /** Format: int64 */
            id?: number;
            /** @description Unique alphanumeric UID of this site */
            uid?: string;
            /** @description Unique alphanumeric UID of the account to which this site belongs */
            accountUid?: string;
            name?: string;
            description?: string;
            dattoNetworkingNetworkIds?: number[];
            portalUrl?: string;
        };
        /** @description Dnet site mappings page */
        DnetSiteMappingsPage: {
            pageDetails: components["schemas"]["PaginationData"];
            dnetSiteMappings: components["schemas"]["DnetSiteMappingsDto"][];
        };
        /** @description Component data */
        Component: {
            /** Format: int64 */
            id?: number;
            credentialsRequired?: boolean;
            uid?: string;
            name?: string;
            description?: string;
            categoryCode?: string;
            variables?: components["schemas"]["ComponentVariable"][];
        };
        /** @description Component's variables data */
        ComponentVariable: {
            name?: string;
            defaultVal?: string;
            type?: string;
            direction?: boolean;
            description?: string;
            /** Format: int32 */
            variablesIdx?: number;
        };
        /** @description Components page */
        ComponentsPage: {
            pageDetails: components["schemas"]["PaginationData"];
            components: components["schemas"]["Component"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSiteRequest"];
            };
        };
        responses: {
            /** @description Request is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createSiteVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Variable Creation Request"];
            };
        };
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UID of the device to move to a different site */
                deviceUid: string;
                /** @description The UID of the target site */
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device and/or site not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createQuickJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuickJobRequest"];
            };
        };
        responses: {
            /** @description Request is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuickJobResponse"];
                };
            };
            /** @description Request cannot be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuickJobResponse"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuickJobResponse"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuickJobResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createAccountVariable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Variable Creation Request"];
            };
        };
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resetApiKeys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AuthUserKey"];
                };
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SiteRequest"];
            };
        };
        responses: {
            /** @description Request is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Site"];
                };
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSiteVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
                variableId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Variable Update Request"];
            };
        };
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteSiteVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
                variableId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProxy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProxySettings"];
            };
        };
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteProxy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Nothing was done because the proxy data doesn't exist. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setWarrantyData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Warranty"];
            };
        };
        responses: {
            /** @description Request is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request cannot be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setUdfFields: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Udf"];
            };
        };
        responses: {
            /** @description Request is invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unmuteAlert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                alertUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    resolveAlert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                alertUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    muteAlert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                alertUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateAccountVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                variableId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Variable Update Request"];
            };
        };
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAccountVariable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                variableId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Variable was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request aborted due to concurrent write access to this record. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RateStatusResponse"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RateStatusResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPaginationConfigurations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationConfiguration"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationConfiguration"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteVariables: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesPage"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SiteSettings"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteDeviceFilters: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteDevices: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                filterId?: number;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Site or filter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteDevicesWithNetworkInterface: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesNetworkInterfacePage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesNetworkInterfacePage"];
                };
            };
            /** @description Site or filter not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesNetworkInterfacePage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteResolvedAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSiteOpenAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path: {
                siteUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Site was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Job was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJobResults: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobUid: string;
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobResults"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobResults"];
                };
            };
            /** @description Job or device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobResults"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStdOut: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobUid: string;
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Job or device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStdErr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobUid: string;
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Job or device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStdData"][];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getJobComponents: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path: {
                jobUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobComponentsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobComponentsPage"];
                };
            };
            /** @description Job was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobComponentsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDefaultsFilters: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCustomFilters: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FiltersPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getByUid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeviceResolvedAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeviceOpenAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getByMacAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                macAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Device was found. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"][];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Device"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPrinterAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device identified by the given device UID is not of class printer. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrinterAudit"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrinterAudit"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrinterAudit"];
                };
            };
            /** @description Printer was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrinterAudit"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEsxiHostAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device identified by the given device UID is not of class ESXi host. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ESXiHostAudit"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ESXiHostAudit"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ESXiHostAudit"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ESXiHostAudit"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeviceAudit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device identified by the given device UID is not of class device. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAudit"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAudit"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAudit"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAudit"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeviceAuditSoftware: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path: {
                deviceUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The device identified by the given device UID is not of class device. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwarePage"];
                };
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwarePage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwarePage"];
                };
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SoftwarePage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDeviceAuditByMacAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                macAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Audit data was found. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAudit"][];
                };
            };
            /** @description The device identified by the given device MAC address is not of class device. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Device was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAlert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                alertUid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Alert"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Alert"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActivities: {
        parameters: {
            query?: {
                /**
                 * @description Specifies the number of records to be returned
                 * @example 20
                 */
                size?: number;
                /**
                 * @description Specifies the order in which records should be returned based on their creation date
                 * @example asc
                 */
                order?: "asc" | "desc";
                /**
                 * @description Acts as a pointer to determine the starting point for returning records from the database. It is not advised to set this parameter manually. Instead, it is recommended to utilize the 'prevPage' and 'nextPage' URLs that are returned in the response where this parameter in already included.
                 * @example 1662554037000,60761aa3-d03e-3d76-b75b-da28629a4103
                 */
                searchAfter?: string[];
                /** @example next */
                page?: "next" | "previous";
                /**
                 * @description Defines the UTC start date for fetching data. By default API returns logs from last 15 minutes. Format: yyyy-MM-ddTHH:mm:ssZ
                 * @example 2022-12-21T10:15:30Z
                 */
                from?: string;
                /**
                 * @description Defines the UTC end date for fetching data. Format: yyyy-MM-ddTHH:mm:ssZ
                 * @example 2023-02-25T10:15:30Z
                 */
                until?: string;
                /**
                 * @description Filters the returned activity logs based on their type. It can take multiple values separated by comma
                 * @example device
                 */
                entities?: "device" | "user";
                /**
                 * @description Filters the returned activity logs based on their category. It can take multiple values separated by comma
                 * @example job,device
                 */
                categories?: string[];
                /**
                 * @description Filters the returned activity logs based on their action. It can take multiple values separated by comma
                 * @example deployment,note
                 */
                actions?: string[];
                /**
                 * @description Filters the returned activity logs based on the site they were created in. It can take multiple values separated by comma
                 * @example 4,8
                 */
                siteIds?: number[];
                /**
                 * @description Filters the returned activity logs based on the user they are associated with. It can take multiple values separated by comma
                 * @example 1,4
                 */
                userIds?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivityLogsPage"];
                };
            };
            /** @description Request parameters are invalid. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAccountVariables: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariablesPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsers: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSites: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                /** @description Optional. Filters results based on the provided value using the LIKE operator. Partial matches are allowed. */
                siteName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SitesPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SitesPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDnetSiteMappings: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnetSiteMappingsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DnetSiteMappingsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAccountDevices: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                /** @description Optional. If applied, this filter exclusively determines the results. */
                filterId?: number;
                /** @description Optional. Filters results based on the provided value using the LIKE operator. Partial matches are allowed. */
                hostname?: string;
                /** @description Optional. Filters results based on the provided value using the LIKE operator. Partial matches are allowed. */
                deviceType?: string;
                /** @description Optional. Filters results based on the provided value using the LIKE operator. Partial matches are allowed. */
                operatingSystem?: string;
                /** @description Optional. Filters results based on the provided value using the LIKE operator. Partial matches are allowed. */
                siteName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Filter was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevicesPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComponents: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComponentsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAccountClosedAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserAccountOpenAlerts: {
        parameters: {
            query?: {
                page?: number;
                max?: number;
                muted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request can not be authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Authenticated user doesn't have access to this resource. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertsPage"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
